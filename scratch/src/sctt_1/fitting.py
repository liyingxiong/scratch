# '''
# Created on Feb 13, 2015
# 
# @author: Li Yingxiong
# 
# '''
# 
# from scipy.optimize import curve_fit
# import numpy as np
from matplotlib import pyplot as plt
import numpy as np


# 
# def jump(x, k1, a, k2, b, k3):
#     y_arr = np.zeros_like(x_arr)
#     
#     idx1 = x_arr <= a
#     y_arr[idx1] = x_arr[idx1]*k1
#     
#     
#     idx2 = np.where((x_arr > a) & (x_arr <= b))[0] 
#     y_arr[idx2] = (x_arr[idx2]-a)*k2+k1*a
#     
#     idx3 = x_arr > b
#     y_arr[idx3] = (x_arr[idx3]-b)*k3 + k2*(b-a)+k1*a
#     
#     return y_arr
# 
# # x_arr = np.linspace(0, 10, 100)
# # y_arr = jump(x_arr, -1., 3., 3., 6., 2.)
# 
time = np.array([  11.5     ,   13.496966,   15.56348 ,   17.554493,   19.633184,
         21.624918,   23.703298,   25.783155,   27.774613,   29.853134,
         31.844534,   33.922987,   35.914657,   37.993201,   39.984675,
         42.063141,   44.14275 ,   46.134319,   48.212959,   50.204383,
         52.282975,   54.274518,   56.353024,   58.34422 ,   60.423349,
         62.503177,   64.494941,   66.573373,   68.564986,   70.643319,
         72.634926,   74.713299,   76.704886,   78.783249,   80.863289,
         82.855469,   84.933382,   86.92491 ,   89.003284,   90.99531 ,
         93.073406,   95.064845,   97.143287,   99.223412,  101.214893,
        103.293808,  105.284879,  107.363231,  109.35483 ,  111.43326 ,
        113.424784,  115.503273,  117.583169,  119.574792,  121.653276,
        123.644798,  125.723644,  127.714815,  129.793219,  131.784784,
        133.863193,  135.943216,  137.935004,  140.013202,  142.004708,
        144.08321 ,  146.074857,  148.153304,  150.144767,  152.223701,
        154.303263,  156.294978,  158.373342,  160.364767,  162.443279,
        164.434815,  166.513304,  168.50491 ,  170.583385,  172.66318 ,
        174.654802,  176.73337 ,  178.724873,  180.803222,  182.794881,
        184.873405,  186.86481 ,  188.943375,  191.02357 ,  193.015149,
        195.093332,  197.084892,  199.163427,  201.15496 ,  203.233413,
        205.224959,  207.303452,  209.38355 ,  211.374843,  213.453459,
        215.445108,  217.523339,  219.51506 ,  221.593482,  223.58519 ,
        225.663261,  227.743319,  229.735074,  231.81349 ,  233.804847,
        235.883562,  237.874959,  239.953637,  241.944878,  244.023519,
        246.103299,  248.095502,  250.173193,  252.164777,  254.243472,
        256.235255,  258.313475,  260.305304,  262.38348 ,  264.463813,
        266.455598,  268.533882,  270.525172,  272.603637,  274.595626,
        276.673813,  278.665161,  280.743537,  282.823728,  284.815049,
        286.893609,  288.885068,  290.964327,  292.954588,  295.033663,
        297.025079,  299.103482,  301.183805,  303.174929,  305.253457,
        307.244987,  309.323319,  311.315001,  313.393359,  315.384935,
        317.463312,  319.543349,  321.534895,  323.613292,  325.604891,
        327.683697,  329.674979,  331.753314,  333.744886,  335.823225,
        337.903281,  339.894896,  341.973306,  343.964877,  346.043409,
        348.034951,  350.113303,  352.104864,  354.183435,  356.263342,
        358.25494 ,  360.333415,  362.324957,  364.403284,  366.39489 ,
        368.473335,  370.464903,  372.543304,  374.623444,  376.61505 ,
        378.693318,  380.684981,  382.763333,  384.754955,  386.83333 ,
        388.824848,  390.903319,  392.983411,  394.974913,  397.053302,
        399.045021,  401.123424,  403.114979,  405.193402,  407.184861,
        409.263268,  411.343371,  413.334926,  415.413174,  417.404643,
        419.483072,  421.474634,  423.553372,  425.54484 ,  427.62312 ,
        429.703353,  431.694927,  433.773445,  435.764823,  437.843392,
        439.834919,  441.913358,  443.905061,  445.983507,  448.063343,
        450.055057,  452.133441,  454.124994,  456.203249,  458.194864,
        460.273285,  462.264929,  464.34339 ,  466.42343 ,  468.414941,
        470.493336,  472.484878,  474.563509,  476.554929,  478.63346 ,
        480.625058,  482.703348,  484.783406,  486.774968,  488.85359 ,
        490.844844,  492.924211,  494.915122,  496.993375,  498.985007,
        501.063572,  503.143522,  505.135305,  507.213282,  509.205028,
        511.283361,  513.275178,  515.353557,  517.345167,  519.423658,
        521.503385,  523.494881,  525.573405,  527.565035,  529.643563,
        531.635041,  533.713537,  535.70487 ,  537.78341 ,  539.863506,
        541.855098,  543.933562,  545.92525 ,  548.003675,  549.995089,
        552.073535,  554.065153,  556.143553,  558.224049,  560.215179,
        562.293633,  564.285126,  566.363519,  568.355215,  570.433642,
        572.425155,  574.503747,  576.583675,  578.575186,  580.653578,
        582.645084,  584.723655,  586.715185,  588.793538,  590.785172,
        592.863547,  594.943516,  596.935166,  599.013553,  601.005126,
        603.083602,  605.075156,  607.153491,  609.145133,  611.224126,
        613.303581,  615.295082,  617.37353 ,  619.365156,  621.443586,
        623.435175,  625.513541,  627.505305,  629.583587,  631.663588])
 
strain = np.array([  0.00000000e+00,   1.46423075e-05,  -8.20367728e-05,
        -8.21225622e-05,  -2.18785022e-04,  -1.72713365e-04,
        -1.87250511e-04,  -2.83221138e-04,  -2.83885313e-04,
        -3.34384808e-04,  -3.65376909e-04,  -3.72458682e-04,
        -4.27778986e-04,  -4.22299536e-04,  -3.96559959e-04,
        -3.99507239e-04,  -3.90471682e-04,  -4.91473439e-04,
        -4.60038555e-04,  -4.74921626e-04,  -4.88426533e-04,
        -4.83367728e-04,  -5.03400928e-04,  -5.71509383e-04,
        -5.22028290e-04,  -5.70925461e-04,  -6.12608024e-04,
        -6.08625737e-04,  -6.85695028e-04,  -6.30939274e-04,
        -7.08645067e-04,  -7.92455743e-04,  -7.54716724e-04,
        -8.42659126e-04,  -7.92973247e-04,  -8.76504415e-04,
        -9.58851136e-04,  -8.53249962e-04,  -9.42410019e-04,
        -8.50269473e-04,  -9.90272183e-04,  -8.97362300e-04,
        -9.29995468e-04,  -1.02296070e-03,  -9.75884476e-04,
        -9.36642760e-04,  -8.77691629e-04,  -9.71390221e-04,
        -9.34586583e-04,  -8.52754597e-04,  -7.57290405e-04,
        -6.91343290e-04,  -5.72234441e-04,  -6.08218929e-04,
        -5.74246340e-04,  -5.61250635e-04,  -5.49599886e-04,
        -5.48246628e-04,  -5.35458477e-04,  -5.97644698e-04,
        -5.43431353e-04,  -4.72693870e-04,  -5.13075755e-04,
        -5.22653723e-04,  -5.60207326e-04,  -5.55666024e-04,
        -4.87945006e-04,  -5.68564870e-04,  -4.91207769e-04,
        -5.27765108e-04,  -6.01203573e-04,  -6.48069473e-04,
        -6.51102542e-04,  -6.32890290e-04,  -7.05675648e-04,
        -7.23215423e-04,  -6.77802407e-04,  -7.25623060e-04,
        -6.96828274e-04,  -6.19711937e-04,  -5.90388578e-04,
        -5.50424570e-04,  -5.28263240e-04,  -4.47554819e-04,
        -5.56534987e-04,  -4.59404821e-04,  -4.96233365e-04,
        -5.26018880e-04,  -4.29746607e-04,  -4.96737032e-04,
        -4.27247646e-04,  -3.54678144e-04,  -4.10319467e-04,
        -3.71838785e-04,  -3.56363490e-04,  -3.28944102e-04,
        -2.89749432e-04,  -2.67903585e-04,  -2.70532614e-04,
        -1.69685831e-04,  -1.02025695e-04,  -1.25415750e-04,
        -7.00788422e-05,  -6.30966948e-05,   5.31645002e-05,
        -1.47474687e-05,   2.67109341e-05,   4.00027510e-05,
         6.97412195e-05,   1.21566299e-04,   1.29367596e-04,
         1.08310458e-04,   1.36501950e-04,   2.10062180e-04,
         1.86124180e-04,   2.14866385e-04,   2.53419019e-04,
         3.14935529e-04,   2.60913135e-04,   3.34503807e-04,
         3.85288344e-04,   3.61654757e-04,   4.22974782e-04,
         4.78070926e-04,   4.92965067e-04,   5.19197241e-04,
         5.85744883e-04,   5.83149062e-04,   6.00829974e-04,
         6.38117907e-04,   6.90147773e-04,   6.80334577e-04,
         7.78231313e-04,   7.86381302e-04,   8.69109925e-04,
         8.46754877e-04,   8.98424981e-04,   9.45260440e-04,
         9.08318432e-04,   9.98228455e-04,   1.02524657e-03,
         9.66328648e-04,   1.05392789e-03,   1.08302709e-03,
         1.12609335e-03,   1.11308381e-03,   1.20841517e-03,
         1.24303810e-03,   1.28038691e-03,   1.29870432e-03,
         1.36769281e-03,   1.31560206e-03,   1.37754752e-03,
         1.45643499e-03,   1.44657198e-03,   1.50933382e-03,
         1.60174004e-03,   1.52938916e-03,   1.63893941e-03,
         1.66328422e-03,   1.66262281e-03,   1.71810363e-03,
         1.77839695e-03,   1.77859620e-03,   1.85386945e-03,
         1.84651094e-03,   1.84841214e-03,   1.93407974e-03,
         1.91500129e-03,   1.88635871e-03,   1.97067029e-03,
         1.99380574e-03,   1.98556996e-03,   2.07267938e-03,
         2.08815744e-03,   2.13735072e-03,   2.12198059e-03,
         2.29302798e-03,   2.26546192e-03,   2.25572898e-03,
         2.29013328e-03,   2.31657024e-03,   2.38356067e-03,
         2.45523076e-03,   2.40613711e-03,   2.44051650e-03,
         2.51106304e-03,   2.50647469e-03,   2.54514079e-03,
         2.55901929e-03,   2.61352875e-03,   2.57442817e-03,
         2.62484187e-03,   2.66934165e-03,   2.69144210e-03,
         2.72736293e-03,   2.72608716e-03,   2.76042505e-03,
         2.80993382e-03,   2.81195125e-03,   2.83561804e-03,
         2.91143647e-03,   2.85426755e-03,   2.86370161e-03,
         2.93537170e-03,   2.93929864e-03,   2.98707779e-03,
         3.00308165e-03,   2.98034470e-03,   3.04656856e-03,
         3.07072518e-03,   3.07319924e-03,   3.11067259e-03,
         3.11931794e-03,   3.14180029e-03,   3.14294323e-03,
         3.21922658e-03,   3.22713027e-03,   3.23562618e-03,
         3.26216554e-03,   3.25798123e-03,   3.25138375e-03,
         3.27688810e-03,   3.31337072e-03,   3.34415803e-03,
         3.34255571e-03,   3.37240211e-03,   3.38643835e-03,
         3.42025320e-03,   3.43543792e-03,   3.45023520e-03,
         3.54055756e-03,   3.50121345e-03,   3.52450112e-03,
         3.49044551e-03,   3.49580319e-03,   3.59300254e-03,
         3.58762549e-03,   3.62265799e-03,   3.64124937e-03,
         3.68256664e-03,   3.65934816e-03,   3.68059072e-03,
         3.69488433e-03,   3.71268424e-03,   3.79333178e-03,
         3.72241995e-03,   3.79850682e-03,   3.81911564e-03,
         3.82244482e-03,   3.83836843e-03,   3.81606873e-03,
         3.90020596e-03,   3.88110537e-03,   3.91948366e-03,
         3.92655160e-03,   3.95259835e-03,   3.98360706e-03,
         3.97952791e-03,   4.03179024e-03,   4.02576838e-03,
         4.02656262e-03,   4.03600499e-03,   4.09373846e-03,
         4.10084514e-03,   4.11497272e-03,   4.09388790e-03,
         4.10206834e-03,   4.13646157e-03,   4.11591086e-03,
         4.17463230e-03,   4.17368308e-03,   4.13238242e-03,
         4.16739002e-03,   4.23722810e-03,   4.26351008e-03,
         4.24211256e-03,   4.28613634e-03,   4.29555103e-03,
         4.28883732e-03,   4.33155489e-03,   4.34829212e-03,
         4.30287910e-03,   4.38758088e-03,   4.42202393e-03,
         4.33607405e-03,   4.41874179e-03,   4.41330108e-03,
         4.45266180e-03,   4.41486190e-03,   4.46367605e-03,
         4.42780779e-03,   4.46634105e-03,   4.47399568e-03,
         4.43591904e-03,   4.54647662e-03,   4.51524929e-03,
         4.55715601e-03,   4.48817860e-03,   4.49317375e-03,
         4.51160463e-03,   4.52125455e-03,   4.52909459e-03,
         4.50624694e-03,   4.49323187e-03])
# popt = curve_fit(jump, time, strain)[0]
# print popt
# plt.plot(time, strain)
# y_arr = jump(time, popt[0], popt[1], popt[2], popt[3], popt[4])
# plt.plot(time, y_arr)

z = np.polyfit(time, strain, 40)
f = np.poly1d(z)
 
interp = f(time)
plt.plot(time, interp)
plt.plot(time, strain)

plt.figure()
win = 8.
d_interp = interp[win:]-interp[:-win]
plt.plot(time[win:], d_interp)
 
 
plt.show()

#!/usr/bin/env python
#<examples/doc_basic.py>
# from lmfit import minimize, Parameters, Parameter
# import numpy as np

# create data to be fitted
# x = np.linspace(0, 15, 301)
# x = time
# # data = (5. * np.sin(2 * x - 0.1) * np.exp(-x*x*0.025) +
# #         np.random.normal(size=len(x), scale=0.2) )
# data = strain
# 
# # define objective function: returns the array to be minimized
# def fcn2min(params, x, data):
#     """ model decaying sine wave, subtract data"""
#     k1 = params['k1'].value
#     k2 = params['k2'].value
#     k3 = params['k3'].value
#     a = params['a'].value
#     b = params['b'].value
# 
#     model = np.zeros_like(x)
#     
#     idx1 = x <= a
#     model[idx1] = x[idx1]*k1
#           
#     idx2 = np.where((x > a) & (x <= b))[0] 
#     model[idx2] = (x[idx2]-a)*k2+k1*a
#      
#     idx3 = x > b
#     model[idx3] = (x[idx3]-b)*k3 + k2*(b-a)+k1*a
# 
#     
#     return model - data
# 
# # create a set of Parameters
# params = Parameters()
# params.add('k1',   value= 1e-5)
# params.add('k2', value= 0.1, min=0.)
# params.add('k3', value= 2e-5)
# params.add('a', value= 0)
# params.add('b', value= 300)
# 
# 
# 
# # do fit, here with leastsq model
# result = minimize(fcn2min, params, args=(x, data))
# 
# # calculate final result
# final = data + result.residual
# 
# # write error report
# # report_fit(params)
# 
# # try to plot results
# try:
#     import pylab
#     pylab.plot(x, data, 'k+')
#     pylab.plot(x, final, 'r')
#     pylab.show()
# except:
#     pass
